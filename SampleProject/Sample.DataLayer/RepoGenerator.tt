<#@ template language="C#" hostspecific="true" debug="True" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Data" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="Microsoft.SqlServer.Smo" #>
<#@ assembly name="Microsoft.SqlServer.ConnectionInfo" #>
<#@ assembly name="Microsoft.SqlServer.Management.Sdk.Sfc" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="Microsoft.SqlServer.Management.Smo" #>
<#
    //**********************************************************************************************
    // This T4 generates POCOs from the specified DB and saves them to the specified folder which 
    // is relative to the template's location. One file per table/POCO.
    //**********************************************************************************************
 
    //****************************
    // DEFINE YOUR VARIABLES HERE
    //****************************
    // The SQL server name or IP
    string sqlServer = "DESKTOP-M73TD1A\\SQLEXPRESS";
    // The SQL username
    string sqlLogin = "YourLogin";
    // The SQL password
    string sqlPassword = "YourPassword";
    // The SQL database to generate the POCOs for
    string sqlDatabase = "SampleDb";
    // The namespace to apply to the generated classes
    string classNamespace = "Sample.DataLayer";
    // The namespace to find the poco's in
    string pocoNamespace = "Sample.Entities";
    // The destination folder for the generated classes, relative to this file's location.
    string destinationFolder = "Generated";
 
    // Loop over each table and create a class file!
    Server server = new Server(sqlServer);
    server.ConnectionContext.LoginSecure = true;
    //server.ConnectionContext.Login = sqlLogin;
    //server.ConnectionContext.Password = sqlPassword;
    server.ConnectionContext.Connect();
 
    foreach (Table table in server.Databases[sqlDatabase].Tables)
    {
        // Skip sys tables
        if (table.Name.StartsWith("sys"))
        {
            continue;
        }

		string className = table.Name;
		if (className.EndsWith("s"))
		{
			if (className.EndsWith("ies"))
			{
				className = className.Remove(className.Length - 3);
				className += "y";
			}
			else
			{
				className = className.Remove(className.Length - 1);
			}
		}
#>
using System;
using System.Collections.Generic;
using System.Data;
using Dapper;

using <#= pocoNamespace #>;
 
namespace <#= classNamespace #>
{
    /// <summary>
    /// Data Repository for a <#= className #> backed by <#= table.Name #>.
    /// NOTE: This class is generated from a T4 template - you should not modify it manually.
    /// If you want to add a method, create a partial class to extend this one
    /// </summary>
	public partial class <#= className #>Repository : RepositoryBase<<#= className #>>
    {
<# 
        // Keep count so we don't whitespace the last property/column
        int columnCount = table.Columns.Count;
        int i = 0;
 
        Column primaryCol = null;

        // Iterate all columns
        foreach (Column col in table.Columns)
        {
            i++;
            string propertyType = GetNetDataType(col.DataType.Name);
 
            // If we can't map it, skip it
            if (string.IsNullOrWhiteSpace(propertyType))
            {
                // Skip
                continue;
            }
 
            // Handle nullable columns by making the type nullable
            if (col.Nullable && propertyType != "string")
            {
                propertyType += "?";
            }

            if (col.Identity)
            {
                primaryCol = col;
#>
        public <#= className #> Get<#= className #>(<#= propertyType #> <#= className.ToLower() #>Id, IDbConnection sqlConnection)
        {
            return sqlConnection.Get<<#= className #>>(<#= className.ToLower() #>Id);
        }
<#
            }

            if (!col.IsForeignKey && !col.Identity && col.Name.ToLower().Contains("name"))
            {
#>
        public IEnumerable<<#= className #>> Get<#= className #>By<#= col.Name #>(<#= propertyType #> <#=  col.Name.ToLower() #>, IDbConnection sqlConnection)
        {
            return sqlConnection.GetList<<#= className #>>(new { <#= col.Name #> = <#= col.Name.ToLower() #> });
        }
<#
            }

		if (col.IsForeignKey || col.Name.ToLower().Contains("external"))
        {
#>
        public IEnumerable<<#= className #>> Get<#= className #>By<#= col.Name #>(<#= propertyType #> <#=  col.Name.ToLower() #>, IDbConnection sqlConnection)
        {
            return sqlConnection.GetList<<#= className #>>(new { <#= col.Name #> = <#= col.Name.ToLower() #> });
        }
<#
        }

        }

            if (primaryCol != null)
            {
                string propertyType = GetNetDataType(primaryCol.DataType.Name);
#>
        public <#= className #> Save<#= className #>(<#= className #> <#= className.ToLower() #>, IDbConnection sqlConnection)
        {
            var id = <#= className.ToLower() #>.<#= primaryCol.Name #>;
            if (id <= 0)
            {
                id = sqlConnection.Insert<<#= propertyType #>, <#= className #>>(<#= className.ToLower() #>);
            }
            else
            {
                var affectedCount = sqlConnection.Update(<#= className.ToLower() #>);

                if (affectedCount < 1)
                {
                    throw new ApplicationException($"Incorrect number of rows affected during <#= className #> update. Expected 1 but was {affectedCount}");
                }
            }
            
            return sqlConnection.Get<<#= className #>>(id);
        }
<#
            }
#>
    }
}      
<#
        // Write new POCO class to its own file
        SaveOutput(className + "Repository" + ".cs", destinationFolder);
    } 
#>
<#+
    public static string GetNetDataType(string sqlDataTypeName)
    {
        switch (sqlDataTypeName.ToLower())
        {
            case "bigint":
                return "long";
            case "binary":
            case "image":
            case "varbinary":
                return "byte[]";
            case "bit":
                return "bool";
            case "char":
                return "char";
            case "datetime":
            case "smalldatetime":
                return "DateTime";
            case "decimal":
            case "money":
            case "numeric":
                return "decimal";
            case "float":
                return "double";
            case "int":
                return "int";
            case "nchar":
            case "nvarchar":
            case "text":
            case "varchar":
            case "xml":
                return "string";
            case "real":
                return "single";
            case "smallint":
                return "Int16";
            case "tinyint":
                return "byte";
            case "uniqueidentifier":
                return "Guid";
                 
            default:
                return null;
        }
    }
 
    void SaveOutput(string outputFileName, string destinationFolder)
    {
        // Write to destination folder
        string templateDirectory = Path.Combine(Path.GetDirectoryName(Host.TemplateFile), destinationFolder);

		if (!Directory.Exists(templateDirectory))
		{
			Directory.CreateDirectory(templateDirectory);
		}

        string outputFilePath = Path.Combine(templateDirectory, outputFileName);
        File.Delete(outputFilePath);
        File.WriteAllText(outputFilePath, this.GenerationEnvironment.ToString()); 
 
        // Flush generation
        this.GenerationEnvironment.Remove(0, this.GenerationEnvironment.Length);
    }
#>